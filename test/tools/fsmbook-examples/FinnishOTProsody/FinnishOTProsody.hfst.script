

# Data
echo "DATA ---"

echo "{kalastelet} | {kalasteleminen} | {ilmoittautuminen} | \
                 {järjestelmättömyydestänsä} | {kalastelemme} | \
                 {ilmoittautumisesta} | {järjestelmällisyydelläni} | \
                 {järjestelmällistämätöntä} | {voimisteluttelemasta} | \
                 {opiskelija} | {opettamassa} | {kalastelet} | \
                 {strukturalismi} | {onnittelemanikin} | {mäki} | \
                 {perijä} | {repeämä} | {ergonomia} | {puhelimellani} | \
                 {matematiikka} | {puhelimistani} | {rakastajattariansa} | \
                 {kuningas} | {kainostelijat} | {ravintolat} | \
                 {merkonomin} ;" | $2/hfst-regexp2fst -f $1 > FinnWords

# Basic definitions
echo "BASIC DEFINITIONS ---"

echo '[u | y | i]' | $2/hfst-regexp2fst -f $1 > HighV                          # High vowel
echo '[e | o | ö]' | $2/hfst-regexp2fst -f $1 > MidV                          # Mid vowel
echo '[a | ä]' | $2/hfst-regexp2fst -f $1 > LowV                             # Low vowel
echo '[HighV | MidV | LowV]' | $2/hfst-regexp2fst -f $1 > USV                  # Unstressed Vowel

echo "[b | c | d | f | g | h | j | k | l | m | \
          n | p | q | r | s | t | v | w | x | z]" | $2/hfst-regexp2fst -f $1 > C  # Consonant

echo '[á | é | í | ó | ú | ý | ä´ | ö´ ]' | $2/hfst-regexp2fst -f $1 > MSV
echo '[à | è | ì | ò | ù | y` | ä` | ö`]' | $2/hfst-regexp2fst -f $1 > SSV 
echo '[@"MSV" | @"SSV"]' | $2/hfst-regexp2fst -f $1 > SV                              # Stressed vowel
echo '[@"USV" | @"SV"] ' | $2/hfst-regexp2fst -f $1 > V                               # Vowel

echo '[@"V" | @"C"]' | $2/hfst-regexp2fst -f $1 > P                                   # Phone
echo '[[\@"P"+] | .#.]' | $2/hfst-regexp2fst -f $1 > B                             # Boundary

echo '.#. | "."' | $2/hfst-regexp2fst -f $1 > E                                 # Edge
echo '[~$"." "." ~$"."]' | $2/hfst-regexp2fst -f $1 > SB                        # At most one syllable boundary

echo '[@"C"* @"V"]' | $2/hfst-regexp2fst -f $1 > Light                                # Light syllable
echo '[Light @"P"+]' | $2/hfst-regexp2fst -f $1 > Heavy                            # Heavy syllable

echo '[@"Heavy" | @"Light"]' | $2/hfst-regexp2fst -f $1 > S                           # Syllable
echo '[@"S" & $@"SV"]' | $2/hfst-regexp2fst -f $1 > SS                                # Stressed syllable
echo '[@"S" & ~$@"SV"]' | $2/hfst-regexp2fst -f $1 > US                               # Unstressed syllable
echo '[@"S" & $@"MSV"] ' | $2/hfst-regexp2fst -f $1 > MSS                             # Syllable with main stress
echo '[@"S" "." @"S"]' | $2/hfst-regexp2fst -f $1 > BF                                # Binary foot


# Gen
echo "-- GEN ---"

# A diphthong is a combination of two unlike vowels that together form
# the nucleus of a syllable. In general, Finnish diphthongs end in a high vowel.
# However, there are three exceptional high-mid diphthongs: ie, uo, and yö
# that historically come from long ee, oo, and öö, respectively.
# All other adjacent vowels must be separated by a syllable boundary.

echo ' [. .] -> "." || [@"HighV" | @"MidV"] _ @"LowV" , i _ [@"MidV" - e] , u _ [@"MidV" - o] , y _ [@"MidV" - ö] ;' | $2/hfst-regexp2fst -f $1 > MarkNonDiphthongs

# The general syllabification rule has exceptions. In particular, loan
# words such as ate.isti 'atheist' must be partially syllabified in the
# lexicon.

echo "1"
echo '@"C"* @"V"+ @"C"* @-> ... "." || _ @"C" @"V"' | $2/hfst-regexp2fst -f $1 > Syllabify


# Optionally adds primary or secondary stress to the first vowel
# of each syllable.

echo 'a (->) á|à , e (->) é|è , i (->) í|ì , o (->) ó|ò , u (->) ú|ù , y (->) ý|y` , ä (->) ä´|ä` , ö (->) ö´|ö` || @"E" @"C"* _ ' | $2/hfst-regexp2fst -f $1 > Stress
              
echo "3"
# Scan the word, optionally dividing it to any combination of
# unary, binary, and ternary feet. Each foot must contain at least
# one stressed syllable.

echo '[[@"S" ("." @"S" ("." @"S")) & $@"SS"] (->) "(" ... ")" || @"E" _ @"E"]' | $2/hfst-regexp2fst -f $1 > Scan

# In keeping with the idea of "richness of the base", the Gen
# function produces a great number of output candidates for
# even short words. Long words have millions of possible outputs.

echo "4"
echo '[@"MarkNonDiphthongs" .o. @"Syllabify" .o. @"Stress" .o. @"Scan"]' | $2/hfst-regexp2fst -f $1 > Gen




# OT constraints

echo "--- OT constraints --- "

# We use asterisks to mark constraint violations. Ordinary constraints
# such as Lapse assign single asterisks as the violation marks and the
# candidate with the fewest number is selected. Gradient constraints
# such as AllFeetFirst mark violations with sequences of asterisks.
# The number increases with distance from the word edge.

# Every instance of * in an output candidate is a violation.

echo '${*}' | $2/hfst-regexp2fst -f $1 > Viol


echo "1"
# We prune candidates with "lenient composition" that eliminates
# candidates that violate the constraint provided that at least
# one output candidate survives.

echo '~@"Viol"' | $2/hfst-regexp2fst -f $1 > Viol0         # No violations
echo '~[@"Viol"^2]' | $2/hfst-regexp2fst -f $1 > Viol1     # At most one violation
echo '~[@"Viol"^3]' | $2/hfst-regexp2fst -f $1 > Viol2     # At most two violations
echo '~[@"Viol"^4]' | $2/hfst-regexp2fst -f $1 > Viol3     # etc.
echo '~[@"Viol"^5]' | $2/hfst-regexp2fst -f $1 > Viol4 
echo '~[@"Viol"^6]' | $2/hfst-regexp2fst -f $1 > Viol5 
echo '~[@"Viol"^7]' | $2/hfst-regexp2fst -f $1 > Viol6 
echo '~[@"Viol"^8]' | $2/hfst-regexp2fst -f $1 > Viol7 
echo '~[@"Viol"^9]' | $2/hfst-regexp2fst -f $1 > Viol8 
echo '~[@"Viol"^10]' | $2/hfst-regexp2fst -f $1 > Viol9 
echo '~[@"Viol"^11]' | $2/hfst-regexp2fst -f $1 > Viol10 
echo '~[@"Viol"^12]' | $2/hfst-regexp2fst -f $1 > Viol11 
echo '~[@"Viol"^13]' | $2/hfst-regexp2fst -f $1 > Viol12 
echo '~[@"Viol"^14]' | $2/hfst-regexp2fst -f $1 > Viol13 
echo '~[@"Viol"^15]' | $2/hfst-regexp2fst -f $1 > Viol14 
echo '~[@"Viol"^16]' | $2/hfst-regexp2fst -f $1 > Viol15 



echo "2"


# This eliminates the violation marks after the candidate set has
# been pruned by a constraint.

echo '{*} -> 0' | $2/hfst-regexp2fst -f $1 > Pardon


echo "3"

# Constraints

echo "CONSTRAINTS---"

# In this section we define nine constraints for Finnish prosody,
# listed in the order of their ranking: MainStress, Clash, AlignLeft,
# FootBin, Lapse, NonFinal, StressToWeight, Parse, and AllFeetFirst.
# For the one inviolable constraint, we assign no violation marks.
# Clash, Align-Left and Foot-Bin are always satisfiable in Finnish
# but we assign violation marks as not to depend on that knowledge.

# Main Stress: The primary stress in Finnish is on the first
#              syllable. This is an inviolable constraint.

echo '[@"B" @"MSS" ~$@"MSS"]' | $2/hfst-regexp2fst -f $1 > MainStress 

echo "c1"
# Clash: No stress on adjacent syllables.

echo '@"SS" -> ... {*} || @"SS" @"B" _ ' | $2/hfst-regexp2fst -f $1 > Clash 

echo "c2"

# Align-Left: The stressed syllable is initial in the foot.

echo '@"SV" -> ... {*} || .#. ~[?* "(" @"C"*] _ ' | $2/hfst-regexp2fst -f $1 > AlignLeft 

echo "c3"
# Foot-Bin: Feet are minimally bimoraic and maximally bisyllabic.

echo '["(" @"Light" ")" | "(" @"S" ["." @"S"]^>1] -> ... {*} ' | $2/hfst-regexp2fst -f $1 > FootBin 
echo "c4"

# Lapse: Every unstressed syllable must be adjacent to a stressed
# syllable.

echo '@"US" -> ... {*} || [@"B" @"US" @"B"] _ [@"B" @"US" @"B"]' | $2/hfst-regexp2fst -f $1 > Lapse 
echo "c5"

# Non-Final: The final syllable is not stressed.

echo '@"SS" -> ... {*} || _ ~$@"S" .#.' | $2/hfst-regexp2fst -f $1 > NonFinal 


# Stress-To-Weight: Stressed syllables are heavy.

echo '[@"SS" & @"Light"] -> ... {*} || _ ")"| @"E"' | $2/hfst-regexp2fst -f $1 > StressToWeight 
echo "c6"

# License-&#963;: Syllables are parsed into feet.

    echo '@"S" -> ... {*} || @"E" _ @"E"' | $2/hfst-regexp2fst -f $1 > Parse 
echo "c7"

# All-Ft-Left: Every foot starts at the beginning of a
#              prosodic word.

echo '[ "(" -> ...   {*} || .#. @"SB" _ .o. "(" -> ... {*}^2 || .#. @"SB"^2 _ .o. "(" -> ... {*}^3 || .#. @"SB"^3 _ .o. "(" -> ... {*}^4 || .#. @"SB"^4 _ .o. "(" -> ... {*}^5 || .#. @"SB"^5 _ .o. "(" -> ... {*}^6 || .#. @"SB"^6 _ .o. "(" -> ... {*}^7 || .#. @"SB"^7 _ .o. "(" -> ... {*}^8 || .#. @"SB"^8 _ ]' | $2/hfst-regexp2fst -f $1 > AllFeetFirst

# Evaluation
echo "c8"
# Computing the prosody for FinnWords

# Some constraints can always be satisfied; some constraints are
# violated many times. The limits have been chosen to produce
# a unique winner in all the 25 test cases in FinnWords.

echo "[FinnWords .o. Gen \
       .o. MainStress \
       .o. Clash .O. Viol0 .o. Pardon \
       .o. AlignLeft .O. Viol0 \
       .o. FootBin .O. Viol0 .o. Pardon \
       .o. Lapse .O. Viol3 .O. Viol2 .O. Viol1 .O. Viol0 .o. Pardon \
       .o. NonFinal .O. Viol0 .o. Pardon \
       .o. StressToWeight .O. Viol3 .O. Viol2 .O. Viol1 .O. Viol0 .o. Pardon \
       .o. Parse .O. Viol3 .O. Viol2 .O. Viol1 .O. Viol0 .o. Pardon \
       .o. AllFeetFirst .O. Viol15 .O. Viol14 .O. Viol13 \
           Viol12 .O. Viol11 .O. Viol10 .O. Viol9 .O. Viol8 .O. Viol7 .O. \
           Viol6  .O. Viol5  .O. Viol4  .O. Viol3 .O. Viol2 .O. Viol1 .O. \
           Viol0 .o. Pardon \
      ]" | $2/hfst-regexp2fst -f $1 > FinnishOTProsody.hfst.hfst

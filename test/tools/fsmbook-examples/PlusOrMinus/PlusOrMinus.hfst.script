

echo "[1|2|3|4|5|6|7|8|9]" | $TOOLDIR/hfst-regexp2fst -f $1 > N
echo '["0" | N]' | $TOOLDIR/hfst-regexp2fst -f $1 > Z

# Insert an initial 1 in front of a sequence of zeros. To make
# this relation functional in both directions, we need two
# replace expressions. One introduces 1, the other removes 1.
# The composition of the two is a relation that uniquely maps,
# for example, 100 to 99 and, conversely, 99 to 100.

echo '[ 1 <- [. .] || .#. _ "0"+ .#. ]' | $TOOLDIR/hfst-regexp2fst -f $1 > TMP;
echo '[ 1 ->   0   || .#. _ "0"+ .#. ]' | $TOOLDIR/hfst-regexp2fst -f $1 | $TOOLDIR/hfst-compose -1 TMP > CarryUp.hfst

echo '[1 <- "0", 2 <- 1, 3 <- 2, 4 <- 3,  5  <- 4,' \
     '6 <-  5 , 7 <- 6, 8 <- 7, 9 <- 8, "0" <- 9' \
     '|| .#. ("+") @"Z"* _ 9* .#.]' | $TOOLDIR/hfst-regexp2fst -f $1 > AddUp.hfst

echo '[ "0" => .#. @"N" @"Z"* _ , .#. _ .#. ]' | $TOOLDIR/hfst-rule2fst -f $1 > NoLeadingZero.hfst


# PlusOrMinusOne.hfst maps any natural number N to (N-1), and vice versa.

$TOOLDIR/hfst-compose CarryUp.hfst AddUp.hfst | $TOOLDIR/hfst-compose -2 NoLeadingZero.hfst > PlusOrMinusOne.hfst
$TOOLDIR/hfst-compose PlusOrMinusOne.hfst PlusOrMinusOne.hfst > PlusOrMinusTwo.hfst
$TOOLDIR/hfst-compose PlusOrMinusTwo PlusOrMinusOne > PlusOrMinusThree.hfst
$TOOLDIR/hfst-compose PlusOrMinusThree PlusOrMinusOne > PlusOrMinusFour.hfst
$TOOLDIR/hfst-compose PlusOrMinusFour PlusOrMinusOne > PlusOrMinusFive.hfst
$TOOLDIR/hfst-compose PlusOrMinusFive PlusOrMinusOne > PlusOrMinusSix.hfst
$TOOLDIR/hfst-compose PlusOrMinusSix PlusOrMinusOne > PlusOrMinusSeven.hfst
$TOOLDIR/hfst-compose PlusOrMinusSeven PlusOrMinusOne > PlusOrMinusEight.hfst
$TOOLDIR/hfst-compose PlusOrMinusEight PlusOrMinusOne > PlusOrMinusNine.hfst
$TOOLDIR/hfst-compose PlusOrMinusNine PlusOrMinusOne > PlusOrMinusTen.hfst

rm -f PlusOrMinus.hfst.hfst

for i in One Two Three Four Five Six Seven Eight Nine Ten; do \
  cat "PlusOrMinus"$i >> PlusOrMinus.hfst.hfst;
done
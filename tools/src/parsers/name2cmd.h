namespace hfst {
  namespace xfst {

    typedef std::map<std::string, hfst::xfst::XfstCommand> Name2Cmd;
    Name2Cmd name2cmd;
    typedef std::map<hfst::xfst::XfstCommand, std::vector<std::string> > Cmd2Names;
    Cmd2Names cmd2names;

    void init_name2cmd()
    {
    name2cmd["add properties"] = ADD_PROPS_CMD;
    name2cmd["add"] = ADD_PROPS_CMD;
    name2cmd["apply up"] = APPLY_UP_CMD;
    name2cmd["up"] = APPLY_UP_CMD;
    name2cmd["apply down"] = APPLY_DOWN_CMD;
    name2cmd["down"] = APPLY_DOWN_CMD;
    name2cmd["apply med"] = APPLY_MED_CMD;
    name2cmd["med"] = APPLY_MED_CMD;
    name2cmd["ambiguous upper"] = AMBIGUOUS_CMD;
    name2cmd["ambiguous"] = AMBIGUOUS_CMD;
    name2cmd["alias"] = DEFINE_ALIAS_CMD;
    name2cmd["apropos"] = APROPOS_CMD;
    name2cmd["cleanup net"] = CLEANUP_CMD;
    name2cmd["cleanup"] = CLEANUP_CMD;
    name2cmd["clear"] = CLEAR_CMD;
    name2cmd["clear stack"] = CLEAR_CMD;
    name2cmd["collect epsilon-loops"] = COLLECT_EPSILON_LOOPS_CMD;
    name2cmd["epsilon-loops"] = COLLECT_EPSILON_LOOPS_CMD;
    name2cmd["compact sigma"] = COMPACT_SIGMA_CMD;
    name2cmd["compile-replace lower"] = COMPILE_REPLACE_LOWER_CMD;
    name2cmd["com-rep lower"] = COMPILE_REPLACE_LOWER_CMD;
    name2cmd["compile-replace upper"] =  COMPILE_REPLACE_UPPER_CMD;
    name2cmd["com-rep upper"] = COMPILE_REPLACE_UPPER_CMD;
    name2cmd["complete net"] = COMPLETE_CMD;
    name2cmd["complete"] = COMPLETE_CMD;
    name2cmd["compose net"] = COMPOSE_CMD;
    name2cmd["compose"] = COMPOSE_CMD;
    name2cmd["concatenate net"] = CONCATENATE_CMD;
    name2cmd["concatenate"] = CONCATENATE_CMD;
    name2cmd["crossproduct net"] = CROSSPRODUCT_CMD;
    name2cmd["crossproduct"] = CROSSPRODUCT_CMD;
    name2cmd["define"] = DEFINE_CMD;
    name2cmd["determinize net"] = DETERMINIZE_CMD;
    name2cmd["determinize"] = DETERMINIZE_CMD;
    name2cmd["determinise net"] = DETERMINIZE_CMD;
    name2cmd["determinise"] = DETERMINIZE_CMD;
    name2cmd["echo"] = ECHO_CMD;
    name2cmd["edit properties"] = EDIT_PROPS_CMD;
    name2cmd["edit"] = EDIT_PROPS_CMD;
    name2cmd["eliminate flag"] = ELIMINATE_FLAG_CMD;
    name2cmd["eliminate flags"] = ELIMINATE_ALL_CMD;
    name2cmd["epsilon-remove net"] = EPSILON_REMOVE_CMD;
    name2cmd["epsilon-remove"] = EPSILON_REMOVE_CMD;
    name2cmd["extract ambiguous"] = EXTRACT_AMBIGUOUS_CMD;
    name2cmd["extract unambiguous"] = EXTRACT_UNAMBIGUOUS_CMD;
    name2cmd["help"] = DESCRIBE_CMD;
    name2cmd["hfst"] = HFST_CMD;
    name2cmd["ignore net"] = IGNORE_CMD;
    name2cmd["ignore"] = IGNORE_CMD;
    name2cmd["intersect net"] = INTERSECT_CMD;
    name2cmd["intersect"] = INTERSECT_CMD;
    name2cmd["conjunct"] = INTERSECT_CMD;
    name2cmd["inspect"] = INSPECT_CMD;
    name2cmd["inspect net"] = INSPECT_CMD;
    name2cmd["invert net"] = INVERT_CMD;
    name2cmd["invert"] = INVERT_CMD;
    name2cmd["label net"] = LABEL_CMD;
    name2cmd["list"] = LIST_CMD;
    name2cmd["load defined"] = LOADD_CMD;
    name2cmd["loadd"] = LOADD_CMD;
    name2cmd["load"] = LOADS_CMD;
    name2cmd["load stack"] = LOADS_CMD;
    name2cmd["lower-side net"] = LOWER_SIDE_CMD;
    name2cmd["lower-side"] = LOWER_SIDE_CMD;
    name2cmd["minimize net"] = MINIMIZE_CMD;
    name2cmd["minimize"] = MINIMIZE_CMD;
    name2cmd["minimise"] = MINIMIZE_CMD;
    name2cmd["minus net"] = MINUS_CMD;
    name2cmd["minus"] = MINUS_CMD;
    name2cmd["subtract"] = MINUS_CMD;
    name2cmd["name net"] = NAME_CMD;
    name2cmd["name"] = NAME_CMD;
    name2cmd["negate net"] = NEGATE_CMD;
    name2cmd["negate"] = NEGATE_CMD;
    name2cmd["one-plus net"] = ONE_PLUS_CMD;
    name2cmd["one-plus"] = ONE_PLUS_CMD;
    name2cmd["pop"] = POP_CMD;
    name2cmd["pop stack"] = POP_CMD;
    name2cmd["print aliases"] = PRINT_ALIASES_CMD;
    name2cmd["aliases"] = PRINT_ALIASES_CMD;
    name2cmd["print arc-tally"] = PRINT_ARCCOUNT_CMD;
    name2cmd["arc-tally"] = PRINT_ARCCOUNT_CMD;
    name2cmd["print defined"] = PRINT_DEFINED_CMD;
    name2cmd["pdefined"] = PRINT_DEFINED_CMD;
    name2cmd["write definition"] = SAVE_DEFINITIONS_CMD;
    name2cmd["wdef"] = SAVE_DEFINITIONS_CMD;
    name2cmd["write definitions"] = SAVE_DEFINITIONS_CMD;
    name2cmd["wdefs"] = SAVE_DEFINITIONS_CMD;
    name2cmd["print directory"] = PRINT_DIR_CMD;
    name2cmd["directory"] = PRINT_DIR_CMD;
    name2cmd["write dot"] = SAVE_DOT_CMD;
    name2cmd["wdot"] = SAVE_DOT_CMD;
    name2cmd["dot"] = SAVE_DOT_CMD;
    name2cmd["write att"] = WRITE_ATT_CMD;
    name2cmd["att"] = WRITE_ATT_CMD;
    name2cmd["print file-info"] = PRINT_FILE_INFO_CMD;
    name2cmd["file-info"] = PRINT_FILE_INFO_CMD;
    name2cmd["print flags"] = PRINT_FLAGS_CMD;
    name2cmd["flags"] = PRINT_FLAGS_CMD;
    name2cmd["print labels"] = PRINT_LABELS_CMD;
    name2cmd["labels"] = PRINT_LABELS_CMD;
    name2cmd["print label-maps"] = PRINT_LABELMAPS_CMD;
    name2cmd["label-maps"] = PRINT_LABELMAPS_CMD;
    name2cmd["print label-tally"] = PRINT_LABEL_COUNT_CMD;
    name2cmd["label-tally"] = PRINT_LABEL_COUNT_CMD;
    name2cmd["print list"] = PRINT_LIST_CMD;
    name2cmd["print lists"] = PRINT_LISTS_CMD;
    name2cmd["print longest-string"] = PRINT_LONGEST_STRING_CMD;
    name2cmd["longest-string"] = PRINT_LONGEST_STRING_CMD;
    name2cmd["pls"] = PRINT_LONGEST_STRING_CMD;
    name2cmd["print longest-string-size"] = PRINT_LONGEST_STRING_SIZE_CMD;
    name2cmd["longest-string-size"] = PRINT_LONGEST_STRING_SIZE_CMD;
    name2cmd["plz"] = PRINT_LONGEST_STRING_SIZE_CMD;
    name2cmd["print lower-words"] = PRINT_LOWER_WORDS_CMD;
    name2cmd["lower-words"] = PRINT_LOWER_WORDS_CMD;
    name2cmd["print name"] = PRINT_NAME_CMD;
    name2cmd["pname"] = PRINT_NAME_CMD;
    name2cmd["print net"] = PRINT_CMD;
    name2cmd["print properties"] = PRINT_PROPS_CMD;
    name2cmd["print props"] = PRINT_PROPS_CMD;
    name2cmd["write properties"] = PRINT_PROPS_CMD;
    name2cmd["write props"] = PRINT_PROPS_CMD;
    name2cmd["print random-lower"] = PRINT_RANDOM_LOWER_CMD;
    name2cmd["random-lower"] = PRINT_RANDOM_LOWER_CMD;
    name2cmd["print random-upper"] = PRINT_RANDOM_UPPER_CMD;
    name2cmd["random-upper"] = PRINT_RANDOM_UPPER_CMD;
    name2cmd["print random-words"] = PRINT_RANDOM_WORDS_CMD;
    name2cmd["random-words"] = PRINT_RANDOM_WORDS_CMD;
    name2cmd["print shortest-string-size"] = PRINT_SHORTEST_STRING_SIZE_CMD;
    name2cmd["print shortest-string-length"] = PRINT_SHORTEST_STRING_SIZE_CMD;
    name2cmd["shortest-string-size"] = PRINT_SHORTEST_STRING_SIZE_CMD;
    name2cmd["shortest-string-length"] = PRINT_SHORTEST_STRING_SIZE_CMD;
    name2cmd["psz"] = PRINT_SHORTEST_STRING_SIZE_CMD;
    name2cmd["print shortest-string"] = PRINT_SHORTEST_STRING_CMD;
    name2cmd["shortest-string"] = PRINT_SHORTEST_STRING_CMD;
    name2cmd["pss"] = PRINT_SHORTEST_STRING_CMD;
    name2cmd["print sigma"] = PRINT_SIGMA_CMD;
    name2cmd["sigma"] = PRINT_SIGMA_CMD;
    name2cmd["print sigma-tally"] = PRINT_SIGMA_COUNT_CMD;
    name2cmd["sigma-tally"] = PRINT_SIGMA_COUNT_CMD;
    name2cmd["sitally"] = PRINT_SIGMA_COUNT_CMD;
    name2cmd["print sigma-word-tally"] = PRINT_SIGMA_WORD_COUNT_CMD;
    name2cmd["print size"] = PRINT_SIZE_CMD;
    name2cmd["size"] = PRINT_SIZE_CMD;
    name2cmd["print stack"] = PRINT_STACK_CMD;
    name2cmd["stack"] = PRINT_STACK_CMD;
    name2cmd["print upper-words"] = PRINT_UPPER_WORDS_CMD;
    name2cmd["upper-words"] = PRINT_UPPER_WORDS_CMD;
    name2cmd["print words"] = PRINT_WORDS_CMD;
    name2cmd["words"] = PRINT_WORDS_CMD;
    name2cmd["prune net"] = PRUNE_NET_CMD;
    name2cmd["prune"] = PRUNE_NET_CMD;
    name2cmd["push"] = PUSH_DEFINED_CMD;
    name2cmd["push defined"] = PUSH_DEFINED_CMD;
    name2cmd["quit"] = QUIT_CMD;
    name2cmd["exit"] = QUIT_CMD;
    name2cmd["bye"] = QUIT_CMD;
    name2cmd["stop"] = QUIT_CMD;
    name2cmd["hyvästi"] = QUIT_CMD;
    name2cmd["au revoir"] = QUIT_CMD;
    name2cmd["näkemiin"] = QUIT_CMD;
    name2cmd["viszlát"] = QUIT_CMD;
    name2cmd["auf wiedersehen"] = QUIT_CMD;
    name2cmd["hasta la vista"] = QUIT_CMD;
    name2cmd["arrivederci"] = QUIT_CMD;
    name2cmd["dodongo"] = QUIT_CMD;
    name2cmd["lexc"] = READ_LEXC_CMD;
    name2cmd["read lexc"] = READ_LEXC_CMD;
    name2cmd["att"] = READ_ATT_CMD;
    name2cmd["read att"] = READ_ATT_CMD;
    name2cmd["read properties"] = READ_PROPS_CMD;
    name2cmd["rprops"] = READ_PROPS_CMD;
    name2cmd["read prolog"] = READ_PROLOG_CMD;
    name2cmd["rpl"] = READ_PROLOG_CMD;
    name2cmd["regex"] = READ_REGEX_CMD;
    name2cmd["read regex"] = READ_REGEX_CMD;
    name2cmd["rs"] = READ_SPACED_CMD;
    name2cmd["read spaced-text"] = READ_SPACED_CMD;
    name2cmd["rt"] = READ_TEXT_CMD;
    name2cmd["read text"] = READ_TEXT_CMD;
    name2cmd["reverse net"] = REVERSE_CMD;
    name2cmd["reverse"] = REVERSE_CMD;
    name2cmd["rotate"] = ROTATE_CMD;
    name2cmd["rotate stack"] = ROTATE_CMD;
    name2cmd["save defined"] = SAVE_DEFINITIONS_CMD;
    name2cmd["saved"] = SAVE_DEFINITIONS_CMD;
    name2cmd["save stack"] = SAVE_STACK_CMD;
    name2cmd["save"] = SAVE_STACK_CMD;
    name2cmd["ss"] = SAVE_STACK_CMD;
    name2cmd["set"] = SET_CMD;
    name2cmd["show variables"] = SHOW_ALL_CMD;
    name2cmd["show variable"] = SHOW_CMD;
    name2cmd["show"] = SHOW_CMD;
    name2cmd["shuffle net"] = SHUFFLE_CMD;
    name2cmd["shuffle"] = SHUFFLE_CMD;
    name2cmd["sigma net"] = SIGMA_CMD;
    name2cmd["sort net"] = SORT_NET_CMD;
    name2cmd["sort"] = SORT_NET_CMD;
    name2cmd["sort in"] = SORT_IN_CMD;
    name2cmd["sort out"] = SORT_OUT_CMD;
    name2cmd["source"] = SOURCE_CMD;
    name2cmd["substitute defined"] = SUBSTITUTE_NAMED_CMD;
    name2cmd["for"] = FOR_CMD;
    name2cmd["substitute label"] = SUBSTITUTE_LABEL_CMD;
    name2cmd["substitute symbol"] = SUBSTITUTE_SYMBOL_CMD;
    name2cmd["substring net"] = SUBSTRING_CMD;
    name2cmd["substring"] = SUBSTRING_CMD;
    name2cmd["system"] = SYSTEM_CMD;
    name2cmd["test equivalent"] = TEST_EQ_CMD;
    name2cmd["equivalent"] = TEST_EQ_CMD;
    name2cmd["te"] = TEST_EQ_CMD;
    name2cmd["test functional"] = TEST_FUNCT_CMD;
    name2cmd["functional"] = TEST_FUNCT_CMD;
    name2cmd["tf"] = TEST_FUNCT_CMD;
    name2cmd["test identity"] = TEST_ID_CMD;
    name2cmd["identity"] = TEST_ID_CMD;
    name2cmd["ti"] = TEST_ID_CMD;
    name2cmd["test lower-bounded"] = TEST_LOWER_BOUNDED_CMD;
    name2cmd["lower-bounded"] = TEST_LOWER_BOUNDED_CMD;
    name2cmd["tlb"] = TEST_LOWER_BOUNDED_CMD;
    name2cmd["test lower-universal"] = TEST_LOWER_UNI_CMD;
    name2cmd["lower-universal"] = TEST_LOWER_UNI_CMD;
    name2cmd["tlu"] = TEST_LOWER_UNI_CMD;
    name2cmd["test non-null"] = TEST_NONNULL_CMD;
    name2cmd["tnn"] = TEST_NONNULL_CMD;
    name2cmd["test null"] = TEST_NULL_CMD;
    name2cmd["tnu"] = TEST_NULL_CMD;
    name2cmd["test overlap"] = TEST_OVERLAP_CMD;
    name2cmd["overlap"] = TEST_OVERLAP_CMD;
    name2cmd["to"] = TEST_OVERLAP_CMD;
    name2cmd["test sublanguage"] = TEST_SUBLANGUAGE_CMD;
    name2cmd["sublanguage"] = TEST_SUBLANGUAGE_CMD;
    name2cmd["ts"] = TEST_SUBLANGUAGE_CMD;
    name2cmd["test upper-bounded"] = TEST_UPPER_BOUNDED_CMD;
    name2cmd["upper-bounded"] = TEST_UPPER_BOUNDED_CMD;
    name2cmd["tub"] = TEST_UPPER_BOUNDED_CMD;
    name2cmd["test upper-universal"] = TEST_UPPER_UNI_CMD;
    name2cmd["upper-universal"] = TEST_UPPER_UNI_CMD;
    name2cmd["tuu"] = TEST_UPPER_UNI_CMD;
    name2cmd["test unambiguous"] = TEST_UNAMBIGUOUS_CMD;
    name2cmd["turn"] = TURN_CMD;
    name2cmd["turn stack"] = TURN_CMD;
    name2cmd["twosided flag-diacritics"] = TWOSIDED_FLAGS_CMD;
    name2cmd["tfd"] = TWOSIDED_FLAGS_CMD;
    name2cmd["undefine"] = UNDEFINE_CMD;
    name2cmd["unlist"] = UNLIST_CMD;
    name2cmd["union net"] = UNION_CMD;
    name2cmd["union"] = UNION_CMD;
    name2cmd["disjunct"] = UNION_CMD;
    name2cmd["upper-side net"] = UPPER_SIDE_CMD;
    name2cmd["upper-side"] = UPPER_SIDE_CMD;
    name2cmd["view net"] = VIEW_CMD;
    name2cmd["wpl"] = SAVE_PROLOG_CMD;
    name2cmd["write prolog"] = SAVE_PROLOG_CMD;
    name2cmd["wspaced-text"] = SAVE_SPACED_CMD;
    name2cmd["write spaced-text"] = SAVE_SPACED_CMD;
    name2cmd["wt"] = SAVE_TEXT_CMD;
    name2cmd["write text"] = SAVE_TEXT_CMD;
    name2cmd["zero-plus net"] = ZERO_PLUS_CMD;
    name2cmd["zero-plus"] = ZERO_PLUS_CMD;

    // Initialize also cmd2names.
    for (Name2Cmd::const_iterator it = name2cmd.begin();
         it != name2cmd.end(); it++)
      {
        cmd2names[it->second].push_back(it->first);
      }
    }

  }
}

    
